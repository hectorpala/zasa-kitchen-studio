const fs = require('fs');
const path = require('path');

// Lista completa de colonias
const colonias = [
  "Acueducto", "Alturas del Sur", "Antonio Nakayama", "Aurora", "Azaleas Residencial",
  "Bachigualato", "Balcones del Humaya", "Benito Ju√°rez", "Bonaterra", "Bosques del Humaya",
  "Bosques del R√≠o", "Brisas de Humaya", "Bur√≥crata", "Campestre", "Campestre Los Laureles",
  "Campo Bello", "Ca√±adas", "Capistrano Residencial", "Centro", "Chapultepec",
  "Chapultepec del R√≠o", "Colinas de San Miguel", "Colinas del Humaya", "Comunicadores", "Country √Ålamos",
  "Country del R√≠o", "Country Tres R√≠os", "Del Humaya", "Desarrollo Urbano Tres R√≠os", "Diana Laura R. de Colosio",
  "Domingo Rub√≠", "El Barrio", "El Mirador", "El Vallado", "Emiliano Zapata",
  "Felipe √Ångeles", "Ferrocarrilera", "Fincas del Humaya", "Florida", "FOVISSSTE Abelardo de la Torre",
  "FOVISSSTE Humaya", "Francisco I. Madero", "Francisco Labastida Ochoa", "Francisco Villa", "Fuentes del Valle",
  "Gabriel Leyva", "Genaro Estrada", "Girasoles", "Grecia", "Guadalupe",
  "Guadalupe Victoria", "Gustavo D√≠az Ordaz", "Heraclio Bernal", "Hermanos Flores Mag√≥n", "Horizontes",
  "Huizaches", "Humaya", "Ignacio Allende", "Independencia", "Industrial El Palmito",
  "INFONAVIT Barrancos", "INFONAVIT Ca√±adas", "INFONAVIT Humaya", "Interlomas", "Isla Musal√°",
  "Jardines de la Sierra", "Jardines del Pedregal", "Jardines del Rey", "Jardines del R√≠o", "Jardines del Valle",
  "Jorge Almada", "Josefa Ortiz de Dom√≠nguez", "Juntas de Humaya", "La Campi√±a", "La Conquista",
  "La Costera", "La Lima", "La Primavera", "La Ribera Residencial", "La Rioja",
  "Las Am√©ricas", "Las Coloradas", "Las Huertas", "Las Ilusiones", "Las Moras",
  "Las Palmas", "Las Quintas", "Las Terrazas", "Las Vegas", "Laureles",
  "L√°zaro C√°rdenas", "Libertad", "Limita de Hitaje", "Loma de Rodriguera", "Loma Linda",
  "Lomas de Guadalupe", "Lomas del Boulevard", "Lomas del Humaya", "Lomas del Magisterio", "Lomas del Pedregal",
  "Lomas del Sol", "Lomas de San Isidro", "Lomas Verdes", "Los √Ålamos", "Los Pinos",
  "Los Portales", "Los Sauces", "Magnolias Residencial", "Mallorca Residencial", "Mercado de Abastos",
  "Miguel Alem√°n", "Miguel de la Madrid", "Miguel Hidalgo", "Miravalle", "Montebello",
  "Morelos", "M√∫sala Isla Bonita", "Nueva Galicia", "Nueva Vizcaya", "Nuevo Bachigualato",
  "Nuevo Culiac√°n", "Nuevo M√©xico", "Obrero Campesino", "Palermo", "Palmillas Residencial",
  "Para√≠so", "Paseo del R√≠o", "Paseos del Valle", "Pedregal del Humaya", "Perisur",
  "Plutarco El√≠as Calles", "Portales del Country", "Portales del R√≠o", "Pradera Dorada", "Praderas del Humaya",
  "Praderas del Rey", "Prados de la Conquista", "Prados del Sol", "Prados del Sur", "Progreso",
  "Providencia", "Puerta de Hierro", "Quinta Americana", "Rafael Buelna", "Real de Chapultepec",
  "Real del √Ålamo", "Real del Country", "Real del Parque", "Real de Minas", "Real de Santa Fe",
  "Real San √Ångel", "Santa Margarita", "Stanza Toscana", "Tierra Blanca", "Tres R√≠os",
  "Universitarios", "Valle Alto", "Villa Fontana", "Villa Universidad", "Villa Verde", "Villas del R√≠o"
];

// Funci√≥n para crear slug de URL
function createSlug(str) {
  return str
    .toLowerCase()
    .replace(/\s+/g, '-')
    .replace(/[√°√†√§√¢]/g, 'a')
    .replace(/[√©√®√´√™]/g, 'e') 
    .replace(/[√≠√¨√Ø√Æ]/g, 'i')
    .replace(/[√≥√≤√∂√¥]/g, 'o')
    .replace(/[√∫√π√º√ª]/g, 'u')
    .replace(/[√±]/g, 'n')
    .replace(/[^a-z0-9-]/g, '')
    .replace(/-+/g, '-')
    .trim('-');
}

// Leer la plantilla
const templatePath = path.join(__dirname, 'colonias', 'template.html');
const template = fs.readFileSync(templatePath, 'utf8');

// Crear directorio de colonias si no existe
const coloniasDir = path.join(__dirname, 'colonias');
if (!fs.existsSync(coloniasDir)) {
  fs.mkdirSync(coloniasDir, { recursive: true });
}

// Generar p√°gina para cada colonia
colonias.forEach(colonia => {
  const slug = createSlug(colonia);
  
  // Reemplazar placeholders en la plantilla
  let pageContent = template
    .replace(/\{\{COLONIA_NAME\}\}/g, colonia)
    .replace(/\{\{COLONIA_SLUG\}\}/g, slug);
  
  // Crear archivo
  const fileName = `${slug}.html`;
  const filePath = path.join(coloniasDir, fileName);
  
  fs.writeFileSync(filePath, pageContent, 'utf8');
  console.log(`‚úÖ Creada p√°gina para: ${colonia} (${fileName})`);
});

console.log(`\nüéâ Se generaron ${colonias.length} p√°ginas de colonias exitosamente!`);
console.log(`üìÅ Ubicaci√≥n: ${coloniasDir}`);

// Generar archivo de √≠ndice con todos los enlaces
const indexContent = `<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Mapa del sitio - Colonias | ZASA Kitchen Studio</title>
  <style>
    body { font-family: Arial, sans-serif; max-width: 1200px; margin: 0 auto; padding: 20px; }
    .grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 10px; }
    .colonia-link { display: block; padding: 10px; background: #f5f5f5; text-decoration: none; color: #333; border-radius: 5px; }
    .colonia-link:hover { background: #e0e0e0; }
  </style>
</head>
<body>
  <h1>P√°ginas de Colonias - ZASA Kitchen Studio</h1>
  <p>Total de p√°ginas generadas: ${colonias.length}</p>
  <div class="grid">
${colonias.map(colonia => `    <a href="${createSlug(colonia)}.html" class="colonia-link">${colonia}</a>`).join('\n')}
  </div>
  <hr>
  <p><a href="../index.html">‚Üê Volver al sitio principal</a></p>
</body>
</html>`;

fs.writeFileSync(path.join(coloniasDir, 'index.html'), indexContent, 'utf8');
console.log(`üìÑ Creado √≠ndice de colonias: colonias/index.html`);